https://www.clean-cpp.com/

Stephan Roth

About Clean C++: Why this book?
Why did I wrote this book? Well, because my impression is that many C++ code bases are in bad shape. They have turned into large and costly maintenance nightmares. No doubt, if you don’t take care with your code, you can produce a large, messy, and unmaintainable beast in any programming language. However, C++ projects in particular are prone to be messy and tend to slip into bad habits. Lots of C++ code that is written today looks as if it was written in the 1980s.

It seems that C++ developers have been forgotten by those who preach crafting good software and how to apply Clean Code principles. Many excellent books, like The Pragmatic Programmer or Robert Martin’s Clean Code are broadly unknown in the C++ developer scene. The Web is full of bad, but apparently very fast and highly optimized C++ code examples, with cruel syntax that completely ignores elementary principles of good design and well-written code. Real software development projects in the wild are often looking the same. They are difficult to understand and contain many design issues. And that’s a real problem, because if a software development project doesn’t be in good shape, this can bring a development organization to its knees.

我为什么要写这本书?嗯，因为我的印象是，许多c++代码库都处于糟糕的状态。它们已经变成了庞大而昂贵的维护噩梦。毫无疑问，如果不小心编写代码，无论使用哪种编程语言，都可能生成一个庞大、混乱且难以维护的庞然大物。然而，c++项目尤其容易变得混乱，容易陷入坏习惯。今天编写的许多c++代码看起来就像是在20世纪80年代编写的。
似乎c++开发人员已经被那些鼓吹如何制作好软件和如何应用干净代码原则的人所遗忘。许多优秀的书籍，如《实用程序员》或Robert Martin的《干净的代码》，在c++开发人员中并不为人所知。Web上充满了糟糕的，但显然非常快速和高度优化的c++代码示例，其残酷的语法完全忽略了良好设计和良好编写代码的基本原则。实际的软件开发项目通常看起来是一样的。它们很难理解，并且包含许多设计问题。这是一个真正的问题，因为如果软件开发项目没有处于良好的状态，这可能会使开发组织陷入困境。


Catalog												Data
第1章　简介1														|
1.1　软件熵2														|
1.2　整洁的代码4													|
1.3　为什么使用C 4													|
1.4　C 11—新时代的开始5												|
1.5　适合本书的读者5												|
1.6　本书使用的约定6												|
1.6.1　扩展阅读6													|
1.6.2　说明、提示和警告6											|
1.6.3　示例代码7													|
1.6.4　编码风格7													|
1.7　相关网站和代码库7												|
1.8　UML图8															|
第2章　构建安全体系9
2.1　测试的必要性9													|软件质量
2.2　测试入门11														|
2.3　单元测试13														|Google Test CppUnit Boost.Test
2.4　关于QA15														|质量保证 （Quality Assurance）			
2.5　良好的单元测试原则16											|
2.5.1　单元测试的代码的质量16										|
2.5.2　单元测试的命名16												|
2.5.3　单元测试的独立性17											|
2.5.4　一个测试一个断言18											|
2.5.5　单元测试环境的独立初始化19									|2.5.3 独立性 状态
2.5.6　不对getters和setters做单元测试19								|
2.5.7　不对第三方代码做单元测试20									|
2.5.8　不对外部系统做单元测试20										|
2.5.9　如何处理数据库的访问20										|不处理 -> 集成测试
2.5.10　不要混淆测试代码和产品代码21								|单独项目？  =delete 构造和运算符
2.5.11　测试必须快速执行23											|
2.5.12　测试替身24									20230516		|伪模型，假对象，传给测试  正式的时候传真对象
第3章　原则27
3.1　什么是原则27													|
3.2　保持简单和直接原则（KISS）28									|"Keep It Simple, Stupid"，意为"保持简单，傻瓜"
3.3　不需要原则（YAGNI）29											|"You Aren't Gonna Need It!"
3.4　避免复制原则（DRY）29											|"Don't Repeat Yourself" (OAOO) "Once And Only Once"
3.5　信息隐藏原则30													|enum class
3.6　高内聚原则33													|
3.7　松耦合原则35													|
3.8　小心优化原则38													|
3.9　最少惊讶原则（PLA）39											|避免意外响应而感到惊讶
3.10　童子军原则39													|离开营地的时候，比来的之前更干净  **代码所有权集体化
第4章　C 代码整洁的基本规范41
4.1　良好的命名42													|表现力
4.1.1　名称应该自解释43												|简短
4.1.2　使用域中的名称45								20230517		|DDD Domain-Driven Design 领域驱动设计
4.1.3　选择适当抽象层次的名称45										|
4.1.4　避免冗余的名称46												|
4.1.5　避免晦涩难懂的缩写47											|
4.1.6　避免匈牙利命名和命名前缀47									|名称中去除类型信息
4.1.7　避免相同的名称用于不同的目的48								|
4.2　注释49															|
4.2.1　让写代码像讲故事一样49										|自解释 避免注释
4.2.2　不要为易懂的代码写注释50										|
4.2.3　不要通过注释禁用代码50										|注释禁用代码，版本控制系统
4.2.4　不要写块注释51												|
4.2.5　特殊情况的注释是有用的53						20230518		|Dogygen 代码文档生成工具
4.3　函数56															|圈复杂度
4.3.1　只做一件事情59												|
4.3.2　让函数尽可能小59												|4-5 、12-15 函数调用开销忽略不计
4.3.3　函数命名61													|is has开头
4.3.4　使用容易理解的名称61											|意图和目的
4.3.5　函数的参数和返回值62											|一个，避免标志参数bool||枚举 避免输出参数（at all costs）
This is an important rule. 											|避免返回NULL或nullptr 对象所有权
																	|move 转移所有权 直接将对象返回而不用考虑资源
																	|const &    RAII和智能指针
																	|正确使用const <-读 const修饰前面的对象 （开头const除外）
																	|函数后const 不能修改对象中的成员变量
4.4　C++工程中的C风格代码72											|
4.4.1　使用C++的string和stream替代C风格的char*73						|
4.4.2　避免使用printf()、sprintf()和gets()等74						|
4.4.3　使用标准库的容器而不是C风格的数组77			20230519		|std::array using MyTypeArray = std::array<MyType, 10>;
4.4.4　用C++ 类型转换代替C风格的强制转换80							|static_cast const_cast 少用dynamic_cast 不用reinterpret_cast
4.4.5　避免使用宏81													|constexpr
第5章　现代C++的高级概念83
5.1　资源管理84														|资源泄漏 栈上分配
5.1.1　资源申请即初始化85											|RAII 构造时获得，析构时释放
5.1.2　智能指针86													|https://blog.csdn.net/cfl997/article/details/130806099
5.1.3　避免显式的new和delete92										|栈内存，智能指针，stl
5.1.4　管理特有资源92								20230522		|不允许 unique_ptr<void> win32的句柄
5.2　Move语义94														|c++11
5.2.1　什么是Move语义94												|拷贝构造，更快 容器vector插入
5.2.2　左值和右值的关系95											|右 不可赋值 在栈上
5.2.3　右值引用96													|左 & 右 &&
5.2.4　不要滥用Move97												|作为返回值没有必要，std::move(result)11开始所有的标准库，
																	|编译器自动判定，并加上move。干扰复制省略（RVO）
5.2.5　零原则98														|11之后：五规则：析构函数、复制构造函数、复制赋值函数
																	|移动构造函数、移动赋值函数
																	| ***不声明/定义析构函数 copy/move赋值运算符 			
																	|用c++智能指针和标准库来管理资源
5.3　编译器是你的搭档102											|解决 define static new 检查 
5.3.1　自动类型推导102												|auto begin(word) word.begin()  {}  ***14 返回值auto
5.3.2　编译时计算105												|constexpr 变量或函数 14可以多个返回值 
																	|constexpr 类不能虚函数和显示析构
5.3.3　模板变量107													|
5.4　不允许未定义的行为108											|delete delete[] 11 默认数组类型删除器
													20230523		|shared_ptr(new,std::default_delete<std::string[]>());
5.5　Type-Rich编程110												|
5.6　了解你使用的库116												|
5.6.1　熟练使用<algorithm>116										|执行策略 可读性
5.6.2　熟练使用Boost121												|
5.6.3　应该了解的一些库121											| 11：chrono regex 17：filesystem
5.7　恰当的异常和错误处理机制122									|
5.7.1　防患于未然123												|noexcept
5.7.2　异常即异常—字面上的意思126									|不能滥用异常
5.7.3　如果不能恢复则尽快退出128									|
5.7.4　用户自定义异常128											|
5.7.5　值类型抛出，常量引用类型捕获130								|catch中delete...no use it
5.7.6　注意catch的正确顺序130						20230524		|
第6章　面向对象131
6.1　面向对象思想132
6.2　抽象—解决复杂问题的关键因素133
6.3　类的设计原则134
6.3.1　让类尽可能小134
6.3.2　单一职责原则（SRP）135
6.3.3　开闭原则（OCP）135
6.3.4　里氏替换原则(LSP)136
6.3.5　接口隔离原则（ISP）146
6.3.6　无环依赖原则148
6.3.7　依赖倒置原则（DIP）151
6.3.8　不要和陌生人说话（迪米特法则）156
6.3.9　避免“贫血类”160
6.3.10　只说不问160
6.3.11　避免类的静态成员162
第7章　函数式编程164
7.1　什么是函数式编程165
7.1.1　什么是函数166
7.2.2　pure函数和impure函数167
7.2　现代C 中的函数式编程168
7.2.1　C 模板函数编程168
7.2.2　仿函数170
7.2.3　绑定和函数包装176
7.2.4　Lambda表达式178
7.2.5　通用Lambda表达式（C 14）180
7.3　高阶函数181
7.4　整洁的函数式编程代码186
第8章　测试驱动开发188
8.1　普通的旧单元测试的缺点189
8.2　测试驱动开发作为颠覆者190
8.2.1　TDD的流程190
8.2.2　TDD的一个小例子：Code Kata193
8.3　TDD的优势210
8.4　什么时候不应该使用TDD212
第9章　设计模式和习惯用法213
9.1　设计原则与设计模式214
9.2　常见的设计模式及应用场景214
9.2.1　依赖注入模式215
9.2.2　Adapter模式226
9.2.3　Strategy模式227
9.2.4　Command模式231
9.2.5　Command处理器模式235
9.2.6　Composite模式238
9.2.7　Observer模式241
9.2.8　Factory模式245
9.2.9　Facade模式248
9.2.10　Money Class模式249
9.2.11　特例模式252
9.3　什么是习惯用法255
附录A　UML简要指南266
参考文献275



